//Defining pins for the distance messuring code
#define echoPin_N  10								 
#define trigPin_N  9									 


//Variables to store the pins the motors are connected to
int motor1pin1 = 3;


void setup() {
  pinMode(echoPin_N, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(trigPin_N, INPUT);  // Sets the echoPin as an INPUT
  pinMode(motor1pin1, OUTPUT);


  Serial.begin(9600);
  
  Serial.println("Distance measurement using Arduino Uno.");

  delay(500);
  

}

void loop() {

    //Clockwise motion
  if(distanceMeasure(echoPin_N,trigPin_N) < 10){
    digitalWrite(motor1pin1, HIGH);
    Serial.println(distanceMeasure(echoPin_N,trigPin_N));
  }
}

/*
  void definePin(int echo,int trig){
  pinMode(trig, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echo, INPUT);  // Sets the echoPin as an INPUT
  Serial.println("DEFINE PIN PASS");
}
*/

int distanceMeasure(int echoPin,int trigPin){

  long duration; // Variable to store time taken to the pulse to reach receiver
  int distance; // Variable to store distance calculated using formula

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2); // wait for 2 ms to avoid collision in serial monitor

  digitalWrite(trigPin, HIGH); // turn on the Trigger to generate pulse
  delayMicroseconds(10); // keep the trigger "ON" for 10 ms to generate pulse for 10 ms.

  digitalWrite(trigPin, LOW); // Turn off the pulse trigger to stop pulse generation

	// If pulse reached the receiver echoPin
	// become high Then pulseIn() returns the
	// time taken by the pulse to reach the
	// receiver

  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.0344 / 2; // Expression to calculate distance using time
  Serial.println("inside distance = ");
  Serial.print(distance);
  return distance;

}
